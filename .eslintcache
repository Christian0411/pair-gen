[{"/home/chris/pair-gen/src/index.tsx":"1","/home/chris/pair-gen/src/reportWebVitals.ts":"2","/home/chris/pair-gen/src/App.tsx":"3","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx":"4","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"5","/home/chris/pair-gen/src/components/DndCards/DndCards.tsx":"6","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"7"},{"size":449,"mtime":1607749493687,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607378576922,"results":"10","hashOfConfig":"9"},{"size":5947,"mtime":1608001075377,"results":"11","hashOfConfig":"9"},{"size":841,"mtime":1607749675915,"results":"12","hashOfConfig":"9"},{"size":3459,"mtime":1607751867132,"results":"13","hashOfConfig":"9"},{"size":4029,"mtime":1607837463791,"results":"14","hashOfConfig":"9"},{"size":2088,"mtime":1607999233895,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"dm7g9m",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/home/chris/pair-gen/src/index.tsx",[],["33","34"],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/App.tsx",["35"],"/home/chris/pair-gen/src/components/RollButton/RollButton.tsx",[],"/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",[],"/home/chris/pair-gen/src/components/DndCards/DndCards.tsx",["36","37"],"import React, { useEffect, useState } from \"react\";\nimport PairCard from \"../PairCard/PairCard\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\ninterface DndCardsProps {\n  pairs: string[][];\n  onPairChange: (newPairs: string[][]) => void;\n  highlightClassName: string;\n}\n\nfunction DndCards({ pairs, onPairChange, highlightClassName }: DndCardsProps) {\n  const [dndPairs, setDndPairs] = useState<string[][]>(pairs);\n\n  useEffect(() => {\n    onPairChange(dndPairs);\n  }, [dndPairs]);\n\n  useEffect(() => {\n    if (JSON.stringify(dndPairs) !== JSON.stringify(pairs)) {\n      setDndPairs(pairs);\n    }\n  }, [pairs]);\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  const move = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  };\n\n  const swap = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    const [removedDes] = destClone.splice(\n      droppableDestination.index,\n      1,\n      removed\n    );\n\n    sourceClone.splice(droppableSource.index, 0, removedDes);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n\n  const moveAndUpdatePairs = (source: any, destination: any) => {\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(dndPairs[sInd], source.index, destination.index);\n      const newPairs: any = [...dndPairs];\n      newPairs[sInd] = items;\n      setDndPairs(newPairs);\n    } else {\n      const result = move(dndPairs[sInd], dndPairs[dInd], source, destination);\n      const newPairs = [...dndPairs];\n      newPairs[sInd] = result[sInd];\n      newPairs[dInd] = result[dInd];\n\n      setDndPairs(newPairs.filter((group) => group.length));\n    }\n  };\n\n  function onDragEnd(result: any) {\n    const { source, destination } = result;\n\n    if (result.combine) {\n      const swappeeIndex = dndPairs[result.combine.droppableId].findIndex(\n        (tag) => tag === result.combine.draggableId\n      );\n      const swappeeSource = {\n        droppableId: result.combine.droppableId,\n        index: swappeeIndex,\n      };\n\n      const swapperSource = source;\n      const swapperDestination = swappeeSource;\n\n      if (swapperSource.droppableId === swapperDestination.droppableId) return;\n      const swapResult = swap(\n        dndPairs[swapperSource.droppableId],\n        dndPairs[swapperDestination.droppableId],\n        swapperSource,\n        swapperDestination\n      );\n      const newPairs = [...dndPairs];\n      console.log(\"swapResult\", swapResult);\n      newPairs[source.droppableId] = swapResult[source.droppableId];\n      newPairs[swapperDestination.droppableId] =\n        swapResult[swapperDestination.droppableId];\n      setDndPairs([...newPairs]);\n    } else {\n      moveAndUpdatePairs(source, destination);\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      {dndPairs.map((pair, index) => (\n        <PairCard\n          highlightClassName={highlightClassName}\n          key={index}\n          pair={pair}\n          pairIndex={index}\n        />\n      ))}\n    </DragDropContext>\n  );\n}\nexport default DndCards;\n","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",["38"],"import React from \"react\";\nimport { Card, Tag } from \"antd\";\nimport \"./PairCard.css\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport swap from \"../../imgs/swap.png\";\n\ninterface PairCardProps {\n  pair: string[];\n  pairIndex: number;\n  highlightClassName: string;\n}\n\nfunction PairCard({ pair, pairIndex, highlightClassName }: PairCardProps) {\n  const getItemStyle = (draggableStyle: any, snapshot: any) => {\n    const style = {\n      ...draggableStyle,\n\n      // opt out of pointer-events: none for dragging items\n      ...(snapshot.isDragging && { pointerEvents: \"auto\" }),\n    };\n\n    if (snapshot.combineWith) {\n      return { ...style, cursor: `url(${swap}), auto` };\n    }\n    return style;\n  };\n\n  return (\n    <Card\n      key={pairIndex}\n      className={`card ${highlightClassName}`}\n      title={`Pair ${pairIndex}`}\n      size={\"small\"}\n      bordered={false}\n      data-visible={1}\n    >\n      <Droppable\n        key={pairIndex}\n        direction={\"vertical\"}\n        droppableId={`${pairIndex}`}\n        isCombineEnabled\n      >\n        {(provided, snapshot) => (\n          <div\n            className={\"tag-container\"}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {pair.map((person, index) => (\n              <Draggable\n                index={index}\n                key={`${person}`}\n                draggableId={`${person}`}\n              >\n                {(provided, snapshot) => (\n                  <span\n                    className={\"tag\"}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={getItemStyle(\n                      provided.draggableProps.style,\n                      snapshot\n                    )}\n                  >\n                    {person}\n                  </span>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </Card>\n  );\n}\n\nexport default PairCard;\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":167,"column":9,"nodeType":"45","endLine":167,"endColumn":24},{"ruleId":"46","severity":1,"message":"47","line":16,"column":6,"nodeType":"48","endLine":16,"endColumn":16,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":22,"column":6,"nodeType":"48","endLine":22,"endColumn":13,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":16,"nodeType":"54","messageId":"55","endLine":2,"endColumn":19},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onPairChange'. Either include it or remove the dependency array. If 'onPairChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["58"],"React Hook useEffect has a missing dependency: 'dndPairs'. Either include it or remove the dependency array.",["59"],"@typescript-eslint/no-unused-vars","'Tag' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [dndPairs, onPairChange]",{"range":"64","text":"65"},"Update the dependencies array to be: [dndPairs, pairs]",{"range":"66","text":"67"},[478,488],"[dndPairs, onPairChange]",[611,618],"[dndPairs, pairs]"]