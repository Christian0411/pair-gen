[{"/home/chris/pair-gen/src/App.tsx":"1","/home/chris/pair-gen/src/index.tsx":"2","/home/chris/pair-gen/src/reportWebVitals.ts":"3","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"4","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"5"},{"size":2078,"mtime":1607558820182,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1607387844152,"results":"8","hashOfConfig":"7"},{"size":425,"mtime":1607378576922,"results":"9","hashOfConfig":"7"},{"size":2883,"mtime":1607558671392,"results":"10","hashOfConfig":"7"},{"size":486,"mtime":1607557859896,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"dm7g9m",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/home/chris/pair-gen/src/App.tsx",["25"],"import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport PairInput from \"./components/PairInput/PairInput\";\nimport PairCard from \"./components/PairCard/PairCard\";\nimport { Button } from \"antd\";\nimport logo from \"./imgs/logo.png\";\n\nfunction App() {\n  const [names, setNames] = useState<string[]>([]);\n\n  const [pairs, setPairs] = useState<string[][]>([]);\n\n  function getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  const StringifyArray = (array: String[][]): string => {\n    return `Pairs for ${new Date().toDateString()}: ${array\n      .map((item) => `\\n(${item.join(\", \")})`)\n      .join(\"\")}`;\n  };\n\n  const generatePairs = (names: string[]) => {\n    setNames([]);\n    let temp = names;\n    let tempPairs: string[][] = [];\n    while (temp.length > 0) {\n      let randomIndex = getRandomInt(0, temp.length);\n      const name1 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name1);\n      if (temp.length === 0) {\n        tempPairs = [...tempPairs, [name1]];\n        break;\n      }\n      randomIndex = getRandomInt(0, temp.length);\n      const name2 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name2);\n      tempPairs = [...tempPairs, [name1, name2]];\n    }\n    setPairs(tempPairs);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"title-container\">\n        <img height=\"200\" width=\"200\" src={logo} />\n      </div>\n      <div className=\"pair-input-container\">\n        <PairInput names={names} onNewName={setNames} onEnter={generatePairs} />\n      </div>\n      <div className={\"pair-card-container\"}>\n        {pairs.map((pair, index) => (\n          <PairCard pair={pair} pairIndex={index} />\n        ))}\n        <Button\n          onClick={() => {\n            navigator.clipboard.writeText(StringifyArray(pairs));\n          }}\n        >\n          Copy\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",["26","27"],"/home/chris/pair-gen/src/index.tsx",[],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",[],["28","29"],"/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",[],{"ruleId":"30","severity":1,"message":"31","line":49,"column":9,"nodeType":"32","endLine":49,"endColumn":52},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"33","replacedBy":"37"},{"ruleId":"35","replacedBy":"38"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["39"],"no-negated-in-lhs",["40"],["39"],["40"],"no-global-assign","no-unsafe-negation"]