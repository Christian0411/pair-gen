[{"/Users/omart/Documents/React/pair-gen/src/index.tsx":"1","/Users/omart/Documents/React/pair-gen/src/reportWebVitals.ts":"2","/Users/omart/Documents/React/pair-gen/src/App.tsx":"3","/Users/omart/Documents/React/pair-gen/src/components/RollButton/RollButton.tsx":"4","/Users/omart/Documents/React/pair-gen/src/components/PairInput/PairInput.tsx":"5","/Users/omart/Documents/React/pair-gen/src/components/DndCards/DndCards.tsx":"6","/Users/omart/Documents/React/pair-gen/src/components/PairCard/PairCard.tsx":"7"},{"size":449,"mtime":1607755737711,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607462055402,"results":"10","hashOfConfig":"9"},{"size":6141,"mtime":1608164809698,"results":"11","hashOfConfig":"9"},{"size":841,"mtime":1607755737710,"results":"12","hashOfConfig":"9"},{"size":3776,"mtime":1608223966095,"results":"13","hashOfConfig":"9"},{"size":5380,"mtime":1608164809699,"results":"14","hashOfConfig":"9"},{"size":2390,"mtime":1608165735653,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"cw9fk7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/omart/Documents/React/pair-gen/src/index.tsx",[],["34","35"],"/Users/omart/Documents/React/pair-gen/src/reportWebVitals.ts",[],"/Users/omart/Documents/React/pair-gen/src/App.tsx",["36"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Row, Col, Tooltip } from \"antd\";\nimport \"./App.css\";\nimport PairInput from \"./components/PairInput/PairInput\";\nimport { Button } from \"antd\";\nimport ParticlesBg from \"particles-bg\";\nimport logo from \"./imgs/logo.png\";\nimport { CopyOutlined, GithubOutlined } from \"@ant-design/icons\";\nimport RollButton from \"./components/RollButton/RollButton\";\nimport DndCards from \"./components/DndCards/DndCards\";\n\nfunction App() {\n  const [names, setNames] = useState<string[]>([]);\n\n  const [pairs, setPairs] = useState<string[][]>([[]]);\n\n  const [doRollAnimation, setDoRollAnimation] = useState<number>(0);\n\n  const [hover, setHover] = useState<boolean>();\n\n  const [tooltipVisible, setTooltipVisible] = useState<boolean>();\n\n  function getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  const createCopyString = (array: String[][]): string => {\n    return `Pairs for ${new Date().toDateString()}: ${array\n      .map((item) => `\\n(${item.join(\", \")})`)\n      .join(\"\")}\\nGenerated using ${window.location.href}`;\n  };\n\n  const generatePairs = useCallback((names: string[]) => {\n    setDoRollAnimation(1);\n    let temp = names;\n    let tempPairs: string[][] = [];\n    while (temp.length > 0) {\n      let randomIndex = getRandomInt(0, temp.length);\n      const name1 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name1);\n      if (temp.length === 0) {\n        tempPairs = [...tempPairs, [name1]];\n        break;\n      }\n      randomIndex = getRandomInt(0, temp.length);\n      const name2 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name2);\n      tempPairs = [...tempPairs, [name1, name2]];\n    }\n    setPairs(tempPairs);\n  }, []);\n\n  const createRequestUri = (names: string[]) => {\n    names.length > 0\n      ? window.history.replaceState(null, \"\", `?names=${names.join()}`)\n      : window.history.replaceState(null, \"\", \"/\");\n  };\n\n  useEffect(() => {\n    const windowUrl = window.location.search;\n    const params = new URLSearchParams(windowUrl);\n    const namesFromUrl = params.get(\"names\");\n    if (namesFromUrl) {\n      const namesFromUrlArray = namesFromUrl\n        .split(\",\")\n        .filter((item) => item !== \"\")\n        .map((item) => decodeURIComponent(item).trim());\n      setNames(namesFromUrlArray);\n      generatePairs(namesFromUrlArray);\n    }\n  }, [generatePairs]);\n\n  return (\n    <>\n      <div className=\"App\">\n        <Col>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 36]}>\n            <Col>\n              <img height=\"100\" width=\"100\" alt={\"logo\"} src={logo} />\n            </Col>\n            <Col>\n              <span className=\"title-text\">Pair Gen</span>\n            </Col>\n          </Row>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 8]}>\n            <PairInput\n              names={names}\n              onNewName={(names) => {\n                setNames(names);\n              }}\n              onEnter={(names) => {\n                createRequestUri(names);\n                generatePairs(names);\n              }}\n            />\n            <Col>\n              <RollButton\n                doAnimation={doRollAnimation}\n                onClick={() => {\n                  createRequestUri(names);\n                  generatePairs(names);\n                }}\n                onRollAnimationEnd={() => {\n                  setDoRollAnimation(0);\n                }}\n              />\n            </Col>\n          </Row>\n\n          <Row align=\"middle\" justify=\"center\" gutter={[16, 1]}>\n            <div\n              className={`pair-card-container ${\n                hover ? \"pair-card-container-hover\" : \"\"\n              }`}\n            >\n              {pairs.filter((pair) => pair.length).length > 0 && (\n                <DndCards\n                  highlightClassName={hover ? \"pair-card-hover\" : \"\"}\n                  pairs={pairs}\n                  onPairChange={(newPairs) => setPairs(newPairs)}\n                />\n              )}\n            </div>\n          </Row>\n          <Row align=\"middle\" justify=\"center\">\n            <div className={\"copy-container\"}>\n              {pairs.filter((pair) => pair.length).length > 0 && (\n                <Tooltip\n                  placement=\"right\"\n                  color={\"white\"}\n                  overlayClassName={\"copied-tooltip\"}\n                  trigger={\"click\"}\n                  visible={tooltipVisible}\n                  title={\n                    <span style={{ color: \"black\", fontWeight: \"bold\" }}>\n                      Copied!\n                    </span>\n                  }\n                >\n                  <Button\n                    className=\"copy-button\"\n                    onMouseEnter={() => {\n                      setHover(true);\n                    }}\n                    onMouseLeave={() => {\n                      setHover(false);\n                    }}\n                    onClick={() => {\n                      setTooltipVisible(true);\n                      setTimeout(() => {\n                        setTooltipVisible(false);\n                      }, 1000);\n                      navigator.clipboard.writeText(createCopyString(pairs));\n                    }}\n                    style={{ background: \"transparent\", border: 0 }}\n                  >\n                    <CopyOutlined className=\"copy-icon\" />\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          </Row>\n        </Col>\n      </div>\n      <a\n        className=\"version\"\n        target=\"_blank\"\n        href=\"https://github.com/Christian0411/pair-gen\"\n      >\n        Version 1.1\n        <GithubOutlined\n          style={{ marginLeft: \"10px\", fontSize: \"16px\", color: \"#08c\" }}\n        />\n      </a>\n\n      <span className=\"credits\">\n        Website by Oscar Martinez & Christian Canizares\n      </span>\n\n      <ParticlesBg color=\"#56ca8d\" num={40} type=\"cobweb\" bg={true} />\n    </>\n  );\n}\n\nexport default App;\n","/Users/omart/Documents/React/pair-gen/src/components/RollButton/RollButton.tsx",[],"/Users/omart/Documents/React/pair-gen/src/components/PairInput/PairInput.tsx",[],"/Users/omart/Documents/React/pair-gen/src/components/DndCards/DndCards.tsx",["37","38","39","40"],"import React, { useEffect, useState } from \"react\";\nimport PairCard from \"../PairCard/PairCard\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport \"./DndCards.css\";\nimport { PlusOutlined } from \"@ant-design/icons\";\ninterface DndCardsProps {\n  pairs: string[][];\n  onPairChange: (newPairs: string[][]) => void;\n  highlightClassName: string;\n}\n\nfunction DndCards({ pairs, onPairChange, highlightClassName }: DndCardsProps) {\n  const [dndPairs, setDndPairs] = useState<string[][]>(pairs);\n\n  const [isDragging, setIsDragging] = useState(false);\n\n  useEffect(() => {\n    onPairChange(dndPairs);\n  }, [dndPairs]);\n\n  useEffect(() => {\n    if (JSON.stringify(dndPairs) !== JSON.stringify(pairs)) {\n      setDndPairs(pairs);\n    }\n  }, [pairs]);\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  const move = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  };\n\n  const swap = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    const [removedDes] = destClone.splice(\n      droppableDestination.index,\n      1,\n      removed\n    );\n\n    sourceClone.splice(droppableSource.index, 0, removedDes);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n\n  const moveAndUpdatePairs = (source: any, destination: any) => {\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(dndPairs[sInd], source.index, destination.index);\n      const newPairs: any = [...dndPairs];\n      newPairs[sInd] = items;\n      setDndPairs(newPairs);\n    } else if (destination.droppableId > dndPairs.length - 1) {\n      let newPairs = dndPairs;\n      const temp = newPairs[source.droppableId].splice(source.index, 1);\n      newPairs = newPairs.concat([temp]);\n      setDndPairs(newPairs.filter((group) => group.length));\n    } else {\n      const result = move(dndPairs[sInd], dndPairs[dInd], source, destination);\n      const newPairs = [...dndPairs];\n      newPairs[sInd] = result[sInd];\n      newPairs[dInd] = result[dInd];\n\n      setDndPairs(newPairs.filter((group) => group.length));\n    }\n  };\n\n  function onDragEnd(result: any) {\n    const { source, destination } = result;\n    if (!destination && !result.combine) {\n      return;\n    }\n\n    if (result.combine) {\n      const swappeeIndex = dndPairs[result.combine.droppableId].findIndex(\n        (tag) => tag === result.combine.draggableId\n      );\n      const swappeeSource = {\n        droppableId: result.combine.droppableId,\n        index: swappeeIndex,\n      };\n\n      const swapperSource = source;\n      const swapperDestination = swappeeSource;\n\n      if (swapperSource.droppableId === swapperDestination.droppableId) return;\n      const swapResult = swap(\n        dndPairs[swapperSource.droppableId],\n        dndPairs[swapperDestination.droppableId],\n        swapperSource,\n        swapperDestination\n      );\n      const newPairs = [...dndPairs];\n\n      newPairs[source.droppableId] = swapResult[source.droppableId];\n      newPairs[swapperDestination.droppableId] =\n        swapResult[swapperDestination.droppableId];\n      setDndPairs([...newPairs]);\n    } else if (destination.droppableId === \"add-new-card\") {\n      destination.droppableId = dndPairs.length.toString();\n      moveAndUpdatePairs(source, destination);\n    } else {\n      moveAndUpdatePairs(source, destination);\n    }\n  }\n\n  const onBeforeCapture = () => {\n    setDndPairs([...dndPairs]);\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} onBeforeCapture={onBeforeCapture}>\n      {dndPairs.map((pair, index) => (\n        <PairCard\n          highlightClassName={highlightClassName}\n          key={index}\n          pair={pair}\n          pairIndex={index}\n        />\n      ))}\n      <Droppable\n        key={\"add-new-card\"}\n        direction={\"vertical\"}\n        droppableId={`add-new-card`}\n        isCombineEnabled\n      >\n        {(provided, snapshot) => (\n          <div\n            className={`add-new-card-container ${\n              snapshot.isDraggingOver ? \"add-new-card-container-hover\" : \"\"\n            }`}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            <PlusOutlined className=\"add-new-card\" />\n            <span\n              style={{\n                display: \"none\",\n              }}\n            >\n              {provided.placeholder}\n            </span>\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\nexport default DndCards;\n","/Users/omart/Documents/React/pair-gen/src/components/PairCard/PairCard.tsx",["41","42"],"import React, { useEffect } from \"react\";\nimport { Card, Tag } from \"antd\";\nimport \"./PairCard.css\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport swap from \"../../imgs/swap.png\";\n\ninterface PairCardProps {\n  pair: string[];\n  pairIndex: number;\n  highlightClassName: string;\n  isDragging?: boolean;\n}\n\nfunction PairCard({\n  pair,\n  pairIndex,\n  highlightClassName,\n  isDragging,\n}: PairCardProps) {\n  useEffect(() => {\n    console.table(pair);\n  }, []);\n  const getItemStyle = (draggableStyle: any, snapshot: any) => {\n    const style = {\n      ...draggableStyle,\n\n      // opt out of pointer-events: none for dragging items\n      ...(snapshot.isDragging && { pointerEvents: \"auto\" }),\n    };\n\n    if (snapshot.isDropAnimating && snapshot.draggingOver === \"add-new-card\")\n      return { ...style, transitionDuration: `0.001s` };\n\n    if (snapshot.combineWith) {\n      return { ...style, cursor: `url(${swap}), auto` };\n    }\n    return style;\n  };\n\n  return (\n    <Card\n      key={pairIndex}\n      className={`card ${pair.length || \"add-new-pair\"}  ${highlightClassName}`}\n      title={`Pair ${pairIndex}`}\n      size={\"small\"}\n      bordered={false}\n      data-visible={isDragging ? 0 : 1}\n    >\n      <Droppable\n        key={pairIndex}\n        direction={\"vertical\"}\n        droppableId={`${pairIndex}`}\n        isCombineEnabled\n      >\n        {(provided, snapshot) => (\n          <div\n            className={\"tag-container\"}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {pair.map((person, index) => (\n              <Draggable\n                index={index}\n                key={`${person}`}\n                draggableId={`${person}`}\n              >\n                {(provided, snapshot) => (\n                  <span\n                    className={\"tag\"}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={getItemStyle(\n                      provided.draggableProps.style,\n                      snapshot\n                    )}\n                  >\n                    {person}\n                  </span>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </Card>\n  );\n}\n\nexport default PairCard;\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":169,"column":9,"nodeType":"49","endLine":169,"endColumn":24},{"ruleId":"50","severity":1,"message":"51","line":15,"column":10,"nodeType":"52","messageId":"53","endLine":15,"endColumn":20},{"ruleId":"50","severity":1,"message":"54","line":15,"column":22,"nodeType":"52","messageId":"53","endLine":15,"endColumn":35},{"ruleId":"55","severity":1,"message":"56","line":19,"column":6,"nodeType":"57","endLine":19,"endColumn":16,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":25,"column":6,"nodeType":"57","endLine":25,"endColumn":13,"suggestions":"60"},{"ruleId":"50","severity":1,"message":"61","line":2,"column":16,"nodeType":"52","messageId":"53","endLine":2,"endColumn":19},{"ruleId":"55","severity":1,"message":"62","line":22,"column":6,"nodeType":"57","endLine":22,"endColumn":8,"suggestions":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","@typescript-eslint/no-unused-vars","'isDragging' is assigned a value but never used.","Identifier","unusedVar","'setIsDragging' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onPairChange'. Either include it or remove the dependency array. If 'onPairChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["66"],"React Hook useEffect has a missing dependency: 'dndPairs'. Either include it or remove the dependency array.",["67"],"'Tag' is defined but never used.","React Hook useEffect has a missing dependency: 'pair'. Either include it or remove the dependency array.",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [dndPairs, onPairChange]",{"range":"75","text":"76"},"Update the dependencies array to be: [dndPairs, pairs]",{"range":"77","text":"78"},"Update the dependencies array to be: [pair]",{"range":"79","text":"80"},[619,629],"[dndPairs, onPairChange]",[752,759],"[dndPairs, pairs]",[471,473],"[pair]"]