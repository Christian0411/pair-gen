[{"/home/chris/pair-gen/src/index.tsx":"1","/home/chris/pair-gen/src/reportWebVitals.ts":"2","/home/chris/pair-gen/src/App.tsx":"3","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"4","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"5","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx":"6"},{"size":500,"mtime":1607653774548,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1607378576922,"results":"9","hashOfConfig":"8"},{"size":4792,"mtime":1607748178899,"results":"10","hashOfConfig":"8"},{"size":3326,"mtime":1607745544148,"results":"11","hashOfConfig":"8"},{"size":643,"mtime":1607747588289,"results":"12","hashOfConfig":"8"},{"size":855,"mtime":1607726606730,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"dm7g9m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"/home/chris/pair-gen/src/index.tsx",[],["32","33"],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/App.tsx",["34","35","36"],"import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Slider } from \"antd\";\nimport \"./App.css\";\nimport PairInput from \"./components/PairInput/PairInput\";\nimport PairCard from \"./components/PairCard/PairCard\";\nimport { Button } from \"antd\";\nimport ParticlesBg from \"particles-bg\";\nimport logo from \"./imgs/logo.png\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport RollButton from \"./components/RollButton/RollButton\";\n\nfunction App() {\n  const [names, setNames] = useState<string[]>([]);\n\n  const [pairs, setPairs] = useState<string[][]>([]);\n\n  const [doRollAnimation, setDoRollAnimation] = useState<number>(0);\n\n  const [hover, setHover] = useState<boolean>();\n\n  const windowUrl = window.location.search;\n  const params = new URLSearchParams(windowUrl);\n\n  function getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  const StringifyArray = (array: String[][]): string => {\n    return `Pairs for ${new Date().toDateString()}: ${array\n      .map((item) => `\\n(${item.join(\", \")})`)\n      .join(\"\")}\\nGenerated using ${window.location.href}`;\n  };\n\n  const generatePairs = (names: string[]) => {\n    setDoRollAnimation(1);\n    let temp = names;\n    let tempPairs: string[][] = [];\n    while (temp.length > 0) {\n      let randomIndex = getRandomInt(0, temp.length);\n      const name1 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name1);\n      if (temp.length === 0) {\n        tempPairs = [...tempPairs, [name1]];\n        break;\n      }\n      randomIndex = getRandomInt(0, temp.length);\n      const name2 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name2);\n      tempPairs = [...tempPairs, [name1, name2]];\n    }\n    setPairs(tempPairs);\n  };\n\n  const createRequestUri = (names: string[]) => {\n    names.length > 0\n      ? window.history.replaceState(null, \"\", `?names=${names.join()}`)\n      : window.history.replaceState(null, \"\", \"/\");\n  };\n\n  useEffect(() => {\n    const namesFromUrl = params.get(\"names\");\n    if (namesFromUrl) {\n      console.log(namesFromUrl);\n      const namesFromUrlArray = namesFromUrl\n        .split(\",\")\n        .filter((item) => item !== \"\")\n        .map((item) => decodeURIComponent(item).trim());\n      console.log(namesFromUrlArray);\n      setNames(namesFromUrlArray);\n      generatePairs(namesFromUrlArray);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"App\">\n        <Col>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 36]}>\n            <Col>\n              <img height=\"100\" width=\"100\" src={logo} />\n            </Col>\n            <Col>\n              <span className=\"title-text\">Pair Gen</span>\n            </Col>\n          </Row>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 8]}>\n            <PairInput\n              names={names}\n              onNewName={(names) => {\n                setNames(names);\n              }}\n              onEnter={(names) => {\n                createRequestUri(names);\n                generatePairs(names);\n              }}\n            />\n            <Col>\n              <RollButton\n                doAnimation={doRollAnimation}\n                onClick={() => {\n                  createRequestUri(names);\n                  generatePairs(names);\n                }}\n                onRollAnimationEnd={() => {\n                  setDoRollAnimation(0);\n                }}\n              />\n            </Col>\n          </Row>\n\n          <Row align=\"middle\" justify=\"center\" gutter={[16, 1]}>\n            <div\n              className={`pair-card-container ${\n                hover ? \"pair-card-container-hover\" : \"\"\n              }`}\n            >\n              {pairs.map((pair, index) => (\n                <PairCard pair={pair} pairIndex={index} />\n              ))}\n            </div>\n          </Row>\n          <Row align=\"middle\" justify=\"center\">\n            <div className={\"copy-container\"}>\n              {pairs.length > 0 && (\n                <Button\n                  onMouseEnter={() => {\n                    setHover(true);\n                  }}\n                  onMouseLeave={() => {\n                    setHover(false);\n                  }}\n                  onClick={() => {\n                    navigator.clipboard.writeText(StringifyArray(pairs));\n                  }}\n                  style={{ background: \"transparent\", border: 0 }}\n                >\n                  <CopyOutlined className=\"copy-icon\" />\n                </Button>\n              )}\n            </div>\n          </Row>\n        </Col>\n      </div>\n      <ParticlesBg color=\"#56ca8d\" num={40} type=\"cobweb\" bg={true} />\n    </>\n  );\n}\n\nexport default App;\n","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",["37","38"],"import { Tag } from \"antd\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport \"./PairInput.css\";\n\ninterface PairInputProps {\n  names: string[];\n  onNewName: (names: string[]) => void;\n  onEnter: (names: string[]) => void;\n}\n\nconst Key = {\n  SPACE: 32,\n  BACKSPACE: 8,\n  LEFT_ARROW: 37,\n  ENTER: 13,\n  TAB: 9,\n};\n\nfunction PairInput({ names, onNewName, onEnter }: PairInputProps) {\n  const [tags, setTags] = useState<string[]>([]);\n\n  const [nameInput, setNameInput] = useState<string>(\"\");\n\n  const nameInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (JSON.stringify(tags) !== JSON.stringify(names)) {\n      setTags(names);\n    }\n  }, [names]);\n\n  useEffect(() => {\n    if (JSON.stringify(tags) !== JSON.stringify(names)) {\n      onNewName(tags);\n    }\n  }, [tags]);\n\n  const handleInput = (e: any) => {\n    e.which = e.which || e.keyCode;\n    if (e.which === Key.SPACE || e.which === Key.TAB) {\n      if (e.target.value.trim(\" \") !== \"\") {\n        e.preventDefault();\n        addTag(e.target.value);\n      }\n    } else if (e.which === Key.BACKSPACE) {\n      if (e.target.value === \"\") {\n        popTag();\n      }\n    } else if (e.which === Key.LEFT_ARROW) {\n      if (e.target.value === \"\") {\n        e.preventDefault();\n        const item = popTag();\n        setNameInput(item);\n      }\n    } else if (e.which === Key.ENTER) {\n      if (e.target.value.trim(\" \") !== \"\") {\n        addTag(e.target.value);\n        onEnter([...tags, e.target.value]);\n      } else {\n        onEnter(tags);\n      }\n    }\n  };\n\n  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    const pasted = e.clipboardData.getData(\"Text\");\n    let pastedTags;\n\n    const pastedTagsNewline = pasted\n      .replace(/\\r/g, \"\")\n      .split(/\\n/)\n      .filter((item) => item !== \"\");\n\n    if (pastedTagsNewline.length === 1) {\n      pastedTags = pasted.split(\" \").filter((item) => item !== \"\");\n    } else {\n      pastedTags = pastedTagsNewline;\n    }\n\n    setTags([...tags, ...pastedTags]);\n    setNameInput(\"\");\n    e.preventDefault();\n  };\n\n  const addTag = (tag: string) => {\n    setTags([...tags, String(tag)]);\n    setNameInput(\"\");\n  };\n\n  const popTag = (): string => {\n    const item = tags.pop();\n    setTags([...tags]);\n    return item ?? \"\";\n  };\n\n  const deleteTag = (item: string) => {\n    const newTags = tags.filter((tag) => tag !== item);\n    setTags(newTags);\n    nameInputRef?.current?.focus();\n  };\n\n  return (\n    <>\n      <div className=\"input-container\">\n        {tags.map((item: string) => (\n          <Tag\n            style={{ margin: \"4px\", display: \"flex\", alignItems: \"center\" }}\n            closable\n            onClose={(e) => {\n              e.preventDefault();\n              deleteTag(item);\n            }}\n            color=\"#63b89e\"\n          >\n            {item}\n          </Tag>\n        ))}\n        <input\n          className=\"pair-input\"\n          ref={nameInputRef}\n          autoFocus\n          placeholder={(() => {\n            return tags.length ? \"\" : \"Enter names. Ex. chris robert oscar\";\n          })()}\n          onChange={(e) => setNameInput(String(e.target.value))}\n          onPaste={handlePaste}\n          onKeyDown={handleInput}\n          value={nameInput}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default PairInput;\n",["39","40"],"/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",["41","42"],"import React, { useState, useEffect } from \"react\";\nimport { Card, Tag } from \"antd\";\nimport \"./PairCard.css\";\nimport Draggable from \"react-draggable\";\n\ninterface PairCardProps {\n  pair: string[];\n  pairIndex: number;\n}\n\nfunction PairCard({ pair, pairIndex }: PairCardProps) {\n  return (\n    <Card\n      className={\"card\"}\n      title={`Pair ${pairIndex}`}\n      bordered={false}\n      data-visible={1}\n    >\n      <div className={\"tag-container\"}>\n        {pair.map((person) => (\n          <Draggable>\n            <Tag color=\"#56ca8d\">{person}</Tag>\n          </Draggable>\n        ))}\n      </div>\n    </Card>\n  );\n}\nexport default PairCard;\n","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx",["43","44"],"import { Button } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport dice from \"../../imgs/dice.svg\";\nimport \"./RollButton.css\";\ninterface RollButtonProps {\n  onClick: () => void;\n  onRollAnimationEnd: () => void;\n  doAnimation: number;\n}\n\nfunction RollButton({\n  onClick,\n  doAnimation,\n  onRollAnimationEnd,\n}: RollButtonProps) {\n  const [animation, setAnimation] = useState<number>(doAnimation);\n\n  useEffect(() => {\n    setAnimation(doAnimation);\n  }, [doAnimation]);\n\n  return (\n    <img\n      width=\"30px\"\n      style={{ cursor: \"pointer\" }}\n      height=\"30px\"\n      src={dice}\n      className={\"center image\"}\n      onClick={() => {\n        onClick();\n      }}\n      onAnimationEnd={() => {\n        setAnimation(0);\n        onRollAnimationEnd();\n      }}\n      data-wobble={animation}\n    />\n  );\n}\nexport default RollButton;\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":20,"nodeType":"51","messageId":"52","endLine":2,"endColumn":26},{"ruleId":"53","severity":1,"message":"54","line":74,"column":6,"nodeType":"55","endLine":74,"endColumn":8,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":82,"column":15,"nodeType":"59","endLine":82,"endColumn":58},{"ruleId":"53","severity":1,"message":"60","line":31,"column":6,"nodeType":"55","endLine":31,"endColumn":13,"suggestions":"61"},{"ruleId":"53","severity":1,"message":"62","line":37,"column":6,"nodeType":"55","endLine":37,"endColumn":12,"suggestions":"63"},{"ruleId":"45","replacedBy":"64"},{"ruleId":"47","replacedBy":"65"},{"ruleId":"49","severity":1,"message":"66","line":1,"column":17,"nodeType":"51","messageId":"52","endLine":1,"endColumn":25},{"ruleId":"49","severity":1,"message":"67","line":1,"column":27,"nodeType":"51","messageId":"52","endLine":1,"endColumn":36},{"ruleId":"49","severity":1,"message":"68","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":16},{"ruleId":"57","severity":1,"message":"58","line":23,"column":5,"nodeType":"59","endLine":37,"endColumn":7},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'Slider' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'generatePairs' and 'params'. Either include them or remove the dependency array.","ArrayExpression",["71"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'tags'. Either include it or remove the dependency array.",["72"],"React Hook useEffect has missing dependencies: 'names' and 'onNewName'. Either include them or remove the dependency array. If 'onNewName' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["73"],["69"],["70"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [generatePairs, params]",{"range":"80","text":"81"},"Update the dependencies array to be: [names, tags]",{"range":"82","text":"83"},"Update the dependencies array to be: [names, onNewName, tags]",{"range":"84","text":"85"},[2506,2508],"[generatePairs, params]",[699,706],"[names, tags]",[822,828],"[names, onNewName, tags]"]