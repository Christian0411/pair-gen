[{"/home/chris/pair-gen/src/index.tsx":"1","/home/chris/pair-gen/src/reportWebVitals.ts":"2","/home/chris/pair-gen/src/App.tsx":"3","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx":"4","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"5","/home/chris/pair-gen/src/components/DndCards/DndCards.tsx":"6","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"7"},{"size":449,"mtime":1607749493687,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607378576922,"results":"10","hashOfConfig":"9"},{"size":6141,"mtime":1608163914471,"results":"11","hashOfConfig":"9"},{"size":841,"mtime":1607749675915,"results":"12","hashOfConfig":"9"},{"size":3459,"mtime":1607751867132,"results":"13","hashOfConfig":"9"},{"size":5380,"mtime":1608164224127,"results":"14","hashOfConfig":"9"},{"size":2346,"mtime":1608164320582,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"dm7g9m",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/chris/pair-gen/src/index.tsx",[],["32","33"],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/App.tsx",["34"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Row, Col, Tooltip } from \"antd\";\nimport \"./App.css\";\nimport PairInput from \"./components/PairInput/PairInput\";\nimport { Button } from \"antd\";\nimport ParticlesBg from \"particles-bg\";\nimport logo from \"./imgs/logo.png\";\nimport { CopyOutlined, GithubOutlined } from \"@ant-design/icons\";\nimport RollButton from \"./components/RollButton/RollButton\";\nimport DndCards from \"./components/DndCards/DndCards\";\n\nfunction App() {\n  const [names, setNames] = useState<string[]>([]);\n\n  const [pairs, setPairs] = useState<string[][]>([[]]);\n\n  const [doRollAnimation, setDoRollAnimation] = useState<number>(0);\n\n  const [hover, setHover] = useState<boolean>();\n\n  const [tooltipVisible, setTooltipVisible] = useState<boolean>();\n\n  function getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  const createCopyString = (array: String[][]): string => {\n    return `Pairs for ${new Date().toDateString()}: ${array\n      .map((item) => `\\n(${item.join(\", \")})`)\n      .join(\"\")}\\nGenerated using ${window.location.href}`;\n  };\n\n  const generatePairs = useCallback((names: string[]) => {\n    setDoRollAnimation(1);\n    let temp = names;\n    let tempPairs: string[][] = [];\n    while (temp.length > 0) {\n      let randomIndex = getRandomInt(0, temp.length);\n      const name1 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name1);\n      if (temp.length === 0) {\n        tempPairs = [...tempPairs, [name1]];\n        break;\n      }\n      randomIndex = getRandomInt(0, temp.length);\n      const name2 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name2);\n      tempPairs = [...tempPairs, [name1, name2]];\n    }\n    setPairs(tempPairs);\n  }, []);\n\n  const createRequestUri = (names: string[]) => {\n    names.length > 0\n      ? window.history.replaceState(null, \"\", `?names=${names.join()}`)\n      : window.history.replaceState(null, \"\", \"/\");\n  };\n\n  useEffect(() => {\n    const windowUrl = window.location.search;\n    const params = new URLSearchParams(windowUrl);\n    const namesFromUrl = params.get(\"names\");\n    if (namesFromUrl) {\n      const namesFromUrlArray = namesFromUrl\n        .split(\",\")\n        .filter((item) => item !== \"\")\n        .map((item) => decodeURIComponent(item).trim());\n      setNames(namesFromUrlArray);\n      generatePairs(namesFromUrlArray);\n    }\n  }, [generatePairs]);\n\n  return (\n    <>\n      <div className=\"App\">\n        <Col>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 36]}>\n            <Col>\n              <img height=\"100\" width=\"100\" alt={\"logo\"} src={logo} />\n            </Col>\n            <Col>\n              <span className=\"title-text\">Pair Gen</span>\n            </Col>\n          </Row>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 8]}>\n            <PairInput\n              names={names}\n              onNewName={(names) => {\n                setNames(names);\n              }}\n              onEnter={(names) => {\n                createRequestUri(names);\n                generatePairs(names);\n              }}\n            />\n            <Col>\n              <RollButton\n                doAnimation={doRollAnimation}\n                onClick={() => {\n                  createRequestUri(names);\n                  generatePairs(names);\n                }}\n                onRollAnimationEnd={() => {\n                  setDoRollAnimation(0);\n                }}\n              />\n            </Col>\n          </Row>\n\n          <Row align=\"middle\" justify=\"center\" gutter={[16, 1]}>\n            <div\n              className={`pair-card-container ${\n                hover ? \"pair-card-container-hover\" : \"\"\n              }`}\n            >\n              {pairs.filter((pair) => pair.length).length > 0 && (\n                <DndCards\n                  highlightClassName={hover ? \"pair-card-hover\" : \"\"}\n                  pairs={pairs}\n                  onPairChange={(newPairs) => setPairs(newPairs)}\n                />\n              )}\n            </div>\n          </Row>\n          <Row align=\"middle\" justify=\"center\">\n            <div className={\"copy-container\"}>\n              {pairs.filter((pair) => pair.length).length > 0 && (\n                <Tooltip\n                  placement=\"right\"\n                  color={\"white\"}\n                  overlayClassName={\"copied-tooltip\"}\n                  trigger={\"click\"}\n                  visible={tooltipVisible}\n                  title={\n                    <span style={{ color: \"black\", fontWeight: \"bold\" }}>\n                      Copied!\n                    </span>\n                  }\n                >\n                  <Button\n                    className=\"copy-button\"\n                    onMouseEnter={() => {\n                      setHover(true);\n                    }}\n                    onMouseLeave={() => {\n                      setHover(false);\n                    }}\n                    onClick={() => {\n                      setTooltipVisible(true);\n                      setTimeout(() => {\n                        setTooltipVisible(false);\n                      }, 1000);\n                      navigator.clipboard.writeText(createCopyString(pairs));\n                    }}\n                    style={{ background: \"transparent\", border: 0 }}\n                  >\n                    <CopyOutlined className=\"copy-icon\" />\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          </Row>\n        </Col>\n      </div>\n      <a\n        className=\"version\"\n        target=\"_blank\"\n        href=\"https://github.com/Christian0411/pair-gen\"\n      >\n        Version 1.1\n        <GithubOutlined\n          style={{ marginLeft: \"10px\", fontSize: \"16px\", color: \"#08c\" }}\n        />\n      </a>\n\n      <span className=\"credits\">\n        Website by Oscar Martinez & Christian Canizares\n      </span>\n\n      <ParticlesBg color=\"#56ca8d\" num={40} type=\"cobweb\" bg={true} />\n    </>\n  );\n}\n\nexport default App;\n","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx",[],"/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",[],"/home/chris/pair-gen/src/components/DndCards/DndCards.tsx",["35","36","37","38"],"/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":169,"column":9,"nodeType":"47","endLine":169,"endColumn":24},{"ruleId":"48","severity":1,"message":"49","line":15,"column":10,"nodeType":"50","messageId":"51","endLine":15,"endColumn":20},{"ruleId":"48","severity":1,"message":"52","line":15,"column":22,"nodeType":"50","messageId":"51","endLine":15,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":19,"column":6,"nodeType":"55","endLine":19,"endColumn":16,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":25,"column":6,"nodeType":"55","endLine":25,"endColumn":13,"suggestions":"58"},{"ruleId":"48","severity":1,"message":"59","line":2,"column":16,"nodeType":"50","messageId":"51","endLine":2,"endColumn":19},{"ruleId":"53","severity":1,"message":"60","line":22,"column":6,"nodeType":"55","endLine":22,"endColumn":8,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","@typescript-eslint/no-unused-vars","'isDragging' is assigned a value but never used.","Identifier","unusedVar","'setIsDragging' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onPairChange'. Either include it or remove the dependency array. If 'onPairChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["64"],"React Hook useEffect has a missing dependency: 'dndPairs'. Either include it or remove the dependency array.",["65"],"'Tag' is defined but never used.","React Hook useEffect has a missing dependency: 'pair'. Either include it or remove the dependency array.",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [dndPairs, onPairChange]",{"range":"73","text":"74"},"Update the dependencies array to be: [dndPairs, pairs]",{"range":"75","text":"76"},"Update the dependencies array to be: [pair]",{"range":"77","text":"78"},[619,629],"[dndPairs, onPairChange]",[752,759],"[dndPairs, pairs]",[471,473],"[pair]"]