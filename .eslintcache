[{"/home/chris/pair-gen/src/index.tsx":"1","/home/chris/pair-gen/src/reportWebVitals.ts":"2","/home/chris/pair-gen/src/App.tsx":"3","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"4","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"5","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx":"6"},{"size":500,"mtime":1607653774548,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1607378576922,"results":"9","hashOfConfig":"8"},{"size":3894,"mtime":1607732467588,"results":"10","hashOfConfig":"8"},{"size":3260,"mtime":1607728677483,"results":"11","hashOfConfig":"8"},{"size":664,"mtime":1607732364306,"results":"12","hashOfConfig":"8"},{"size":855,"mtime":1607726606730,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"dm7g9m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/chris/pair-gen/src/index.tsx",[],["29","30"],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/App.tsx",["31","32"],"/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",["33"],"import { Tag } from \"antd\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport \"./PairInput.css\";\n\ninterface PairInputProps {\n  names: string[];\n  onNewName: (names: string[]) => void;\n  onEnter: (names: string[]) => void;\n}\n\nconst Key = {\n  SPACE: 32,\n  BACKSPACE: 8,\n  LEFT_ARROW: 37,\n  ENTER: 13,\n  TAB: 9,\n};\n\nfunction PairInput({ names, onNewName, onEnter }: PairInputProps) {\n  const [tags, setTags] = useState<string[]>([]);\n\n  const [nameInput, setNameInput] = useState<string>(\"\");\n\n  const nameInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setTags(names);\n  }, [names]);\n\n  useEffect(() => {\n    if (JSON.stringify(tags) !== JSON.stringify(names)) {\n      onNewName(tags);\n    }\n  }, [tags]);\n\n  const handleInput = (e: any) => {\n    e.which = e.which || e.keyCode;\n    if (e.which === Key.SPACE || e.which === Key.TAB) {\n      if (e.target.value.trim(\" \") !== \"\") {\n        e.preventDefault();\n        addTag(e.target.value);\n      }\n    } else if (e.which === Key.BACKSPACE) {\n      if (e.target.value === \"\") {\n        popTag();\n      }\n    } else if (e.which === Key.LEFT_ARROW) {\n      if (e.target.value === \"\") {\n        e.preventDefault();\n        const item = popTag();\n        setNameInput(item);\n      }\n    } else if (e.which === Key.ENTER) {\n      if (e.target.value.trim(\" \") !== \"\") {\n        addTag(e.target.value);\n        onEnter([...tags, e.target.value]);\n      } else {\n        onEnter(tags);\n      }\n    }\n  };\n\n  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    const pasted = e.clipboardData.getData(\"Text\");\n    let pastedTags;\n\n    const pastedTagsNewline = pasted\n      .replace(/\\r/g, \"\")\n      .split(/\\n/)\n      .filter((item) => item !== \"\");\n\n    if (pastedTagsNewline.length === 1) {\n      pastedTags = pasted.split(\" \").filter((item) => item !== \"\");\n    } else {\n      pastedTags = pastedTagsNewline;\n    }\n\n    setTags([...tags, ...pastedTags]);\n    setNameInput(\"\");\n    e.preventDefault();\n  };\n\n  const addTag = (tag: string) => {\n    setTags([...tags, String(tag)]);\n    setNameInput(\"\");\n  };\n\n  const popTag = (): string => {\n    const item = tags.pop();\n    setTags([...tags]);\n    return item ?? \"\";\n  };\n\n  const deleteTag = (item: string) => {\n    const newTags = tags.filter((tag) => tag !== item);\n    setTags(newTags);\n    nameInputRef?.current?.focus();\n  };\n\n  return (\n    <>\n      <div className=\"input-container\">\n        {tags.map((item: string) => (\n          <Tag\n            style={{ margin: \"4px\", display: \"flex\", alignItems: \"center\" }}\n            closable\n            onClose={(e) => {\n              e.preventDefault();\n              deleteTag(item);\n            }}\n            color=\"#63b89e\"\n          >\n            {item}\n          </Tag>\n        ))}\n        <input\n          className=\"pair-input\"\n          ref={nameInputRef}\n          autoFocus\n          placeholder={(() => {\n            return tags.length ? \"\" : \"Enter names. Ex. chris robert oscar\";\n          })()}\n          onChange={(e) => setNameInput(String(e.target.value))}\n          onPaste={handlePaste}\n          onKeyDown={handleInput}\n          value={nameInput}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default PairInput;\n","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",["34","35"],"/home/chris/pair-gen/src/components/RollButton/RollButton.tsx",["36","37"],"import { Button } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport dice from \"../../imgs/dice.svg\";\nimport \"./RollButton.css\";\ninterface RollButtonProps {\n  onClick: () => void;\n  onRollAnimationEnd: () => void;\n  doAnimation: number;\n}\n\nfunction RollButton({\n  onClick,\n  doAnimation,\n  onRollAnimationEnd,\n}: RollButtonProps) {\n  const [animation, setAnimation] = useState<number>(doAnimation);\n\n  useEffect(() => {\n    setAnimation(doAnimation);\n  }, [doAnimation]);\n\n  return (\n    <img\n      width=\"30px\"\n      style={{ cursor: \"pointer\" }}\n      height=\"30px\"\n      src={dice}\n      className={\"center image\"}\n      onClick={() => {\n        onClick();\n      }}\n      onAnimationEnd={() => {\n        setAnimation(0);\n        onRollAnimationEnd();\n      }}\n      data-wobble={animation}\n    />\n  );\n}\nexport default RollButton;\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":2,"column":20,"nodeType":"44","messageId":"45","endLine":2,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":59,"column":15,"nodeType":"48","endLine":59,"endColumn":58},{"ruleId":"49","severity":1,"message":"50","line":35,"column":6,"nodeType":"51","endLine":35,"endColumn":12,"suggestions":"52"},{"ruleId":"42","severity":1,"message":"53","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":25},{"ruleId":"42","severity":1,"message":"54","line":1,"column":27,"nodeType":"44","messageId":"45","endLine":1,"endColumn":36},{"ruleId":"42","severity":1,"message":"55","line":1,"column":10,"nodeType":"44","messageId":"45","endLine":1,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":23,"column":5,"nodeType":"48","endLine":37,"endColumn":7},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"@typescript-eslint/no-unused-vars","'Slider' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'names' and 'onNewName'. Either include them or remove the dependency array. If 'onNewName' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["58"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [names, onNewName, tags]",{"range":"61","text":"62"},[756,762],"[names, onNewName, tags]"]