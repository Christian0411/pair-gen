[{"/home/chris/pair-gen/src/index.tsx":"1","/home/chris/pair-gen/src/reportWebVitals.ts":"2","/home/chris/pair-gen/src/App.tsx":"3","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx":"4","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"5","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"6","/home/chris/pair-gen/src/components/EditableLabel/EditableLabel.tsx":"7","/home/chris/pair-gen/src/constants/Constants.tsx":"8","/home/chris/pair-gen/src/components/DndCards/DragDropCards.tsx":"9"},{"size":449,"mtime":1607749493687,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1607378576922,"results":"12","hashOfConfig":"11"},{"size":7115,"mtime":1608420807422,"results":"13","hashOfConfig":"11"},{"size":841,"mtime":1607749675915,"results":"14","hashOfConfig":"11"},{"size":3916,"mtime":1608416641928,"results":"15","hashOfConfig":"11"},{"size":2739,"mtime":1608420018433,"results":"16","hashOfConfig":"11"},{"size":1577,"mtime":1608420061427,"results":"17","hashOfConfig":"11"},{"size":94,"mtime":1608416627810,"results":"18","hashOfConfig":"11"},{"size":6162,"mtime":1608420098097,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"dm7g9m",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/chris/pair-gen/src/index.tsx",[],["41","42"],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/App.tsx",[],"/home/chris/pair-gen/src/components/RollButton/RollButton.tsx",[],"/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",[],"/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",["43","44","45","46","47","48"],"import React, { ChangeEvent, useRef, useState } from \"react\";\nimport { Card, Input } from \"antd\";\nimport \"./PairCard.css\";\nimport {\n  Draggable,\n  DraggableStateSnapshot,\n  Droppable,\n} from \"react-beautiful-dnd\";\nimport swap from \"../../imgs/swap.png\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport EditableLabel from \"../EditableLabel/EditableLabel\";\n\ninterface PairCardProps {\n  pair: string[];\n  pairIndex: number;\n  cardTitle: string;\n  highlightClassName: string;\n  isDragging?: boolean;\n  onTitleChange: (title: string) => void;\n}\n\nconst Key = {\n  ENTER: 13,\n};\n\nfunction PairCard({\n  pair,\n  cardTitle,\n  pairIndex,\n  highlightClassName,\n  isDragging,\n  onTitleChange,\n}: PairCardProps) {\n  const getItemStyle = (\n    draggableStyle: any,\n    snapshot: DraggableStateSnapshot\n  ) => {\n    const style = {\n      ...draggableStyle,\n\n      // opt out of pointer-events: none for dragging items\n      ...(snapshot.isDragging && { pointerEvents: \"auto\" }),\n    };\n\n    if (snapshot.isDropAnimating && snapshot.draggingOver === \"add-new-card\")\n      return { ...style, transitionDuration: `0.001s` };\n\n    if (snapshot.combineWith) {\n      return {\n        ...style,\n        cursor: `url(${swap}), auto`,\n      };\n    }\n    return style;\n  };\n\n  return (\n    <Card\n      key={`${cardTitle}-${pairIndex}`}\n      className={`card ${pair.length || \"add-new-pair\"}  ${highlightClassName}`}\n      title={<EditableLabel onChange={onTitleChange} labelText={cardTitle} />}\n      size={\"small\"}\n      bordered={false}\n      data-visible={isDragging ? 0 : 1}\n    >\n      <Droppable\n        key={pairIndex}\n        direction={\"vertical\"}\n        droppableId={`${pairIndex}`}\n        isCombineEnabled\n      >\n        {(provided, snapshot) => (\n          <div\n            className={\"tag-container\"}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {pair.map((person, index) => (\n              <Draggable\n                index={index}\n                key={`${person}`}\n                draggableId={`${person}`}\n              >\n                {(provided, snapshot) => (\n                  <span\n                    className={\"tag\"}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={getItemStyle(\n                      provided.draggableProps.style,\n                      snapshot\n                    )}\n                  >\n                    {person}\n                  </span>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </Card>\n  );\n}\n\nexport default PairCard;\n","/home/chris/pair-gen/src/components/EditableLabel/EditableLabel.tsx",["49"],"import { EditOutlined } from \"@ant-design/icons\";\nimport React, { ChangeEvent, useRef, useState } from \"react\";\nimport { Key } from \"../../constants/Constants\";\n\ninterface EditableLabelProps {\n  labelText: string;\n  onChange: (label: string) => void;\n}\n\nfunction EditableLabel({ labelText, onChange }: EditableLabelProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [inputHover, setInputHover] = useState<boolean>(false);\n  const [label, setLabel] = useState<string>(labelText);\n\n  const handleInput = (e: any) => {\n    if (e.which === Key.ENTER) {\n      if (e.target.value.trim(\" \") !== \"\") {\n        onChange(label);\n        e.target.blur();\n      }\n    }\n  };\n\n  return (\n    <div\n      onClick={() => {\n        inputRef.current?.select();\n      }}\n      onMouseEnter={() => setInputHover(true)}\n      onMouseLeave={() => setInputHover(false)}\n      className=\"card-title-input-container\"\n    >\n      <input\n        ref={inputRef}\n        maxLength={16}\n        className={`card-title-input ${\n          isEditing && \"card-title-input-editable\"\n        }`}\n        onChange={(e) => setLabel(e.target.value)}\n        onClick={(e) => {\n          e.currentTarget.select();\n        }}\n        onBlur={(e) => {\n          onChange(label);\n          setIsEditing(false);\n        }}\n        onFocus={(e) => setIsEditing(true)}\n        onKeyDown={(e) => handleInput(e)}\n        value={label}\n      />\n      {(isEditing || inputHover) && <EditOutlined />}\n    </div>\n  );\n}\n\nexport default EditableLabel;\n","/home/chris/pair-gen/src/constants/Constants.tsx",[],"/home/chris/pair-gen/src/components/DndCards/DragDropCards.tsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":28},{"ruleId":"54","severity":1,"message":"58","line":1,"column":30,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"54","severity":1,"message":"59","line":1,"column":38,"nodeType":"56","messageId":"57","endLine":1,"endColumn":46},{"ruleId":"54","severity":1,"message":"60","line":2,"column":16,"nodeType":"56","messageId":"57","endLine":2,"endColumn":21},{"ruleId":"54","severity":1,"message":"61","line":10,"column":10,"nodeType":"56","messageId":"57","endLine":10,"endColumn":22},{"ruleId":"54","severity":1,"message":"62","line":22,"column":7,"nodeType":"56","messageId":"57","endLine":22,"endColumn":10},{"ruleId":"54","severity":1,"message":"55","line":2,"column":17,"nodeType":"56","messageId":"57","endLine":2,"endColumn":28},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'ChangeEvent' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'useState' is defined but never used.","'Input' is defined but never used.","'EditOutlined' is defined but never used.","'Key' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]