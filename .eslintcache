[{"/home/chris/pair-gen/src/index.tsx":"1","/home/chris/pair-gen/src/reportWebVitals.ts":"2","/home/chris/pair-gen/src/App.tsx":"3","/home/chris/pair-gen/src/components/RollButton/RollButton.tsx":"4","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"5","/home/chris/pair-gen/src/components/DndCards/DndCards.tsx":"6","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"7"},{"size":449,"mtime":1607749493687,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607378576922,"results":"10","hashOfConfig":"9"},{"size":5516,"mtime":1607832653888,"results":"11","hashOfConfig":"9"},{"size":841,"mtime":1607749675915,"results":"12","hashOfConfig":"9"},{"size":3459,"mtime":1607751867132,"results":"13","hashOfConfig":"9"},{"size":3891,"mtime":1607822315599,"results":"14","hashOfConfig":"9"},{"size":1466,"mtime":1607836771271,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"dm7g9m",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/chris/pair-gen/src/index.tsx",[],["32","33"],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/App.tsx",[],"/home/chris/pair-gen/src/components/RollButton/RollButton.tsx",[],"/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",[],"/home/chris/pair-gen/src/components/DndCards/DndCards.tsx",["34","35"],"import React, { useEffect, useState } from \"react\";\nimport PairCard from \"../PairCard/PairCard\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\ninterface DndCardsProps {\n  pairs: string[][];\n  onPairChange: (newPairs: string[][]) => void;\n}\n\nfunction DndCards({ pairs, onPairChange }: DndCardsProps) {\n  const [dndPairs, setDndPairs] = useState<string[][]>(pairs);\n\n  useEffect(() => {\n    onPairChange(dndPairs);\n  }, [dndPairs]);\n\n  useEffect(() => {\n    if (JSON.stringify(dndPairs) !== JSON.stringify(pairs)) {\n      setDndPairs(pairs);\n    }\n  }, [pairs]);\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  const move = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  };\n\n  const swap = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    const [removedDes] = destClone.splice(\n      droppableDestination.index,\n      1,\n      removed\n    );\n\n    sourceClone.splice(droppableSource.index, 0, removedDes);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n\n  const moveAndUpdatePairs = (source: any, destination: any) => {\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(dndPairs[sInd], source.index, destination.index);\n      const newPairs: any = [...dndPairs];\n      newPairs[sInd] = items;\n      setDndPairs(newPairs);\n    } else {\n      const result = move(dndPairs[sInd], dndPairs[dInd], source, destination);\n      const newPairs = [...dndPairs];\n      newPairs[sInd] = result[sInd];\n      newPairs[dInd] = result[dInd];\n\n      setDndPairs(newPairs.filter((group) => group.length));\n    }\n  };\n\n  function onDragEnd(result: any) {\n    const { source, destination } = result;\n\n    if (result.combine) {\n      const swappeeIndex = dndPairs[result.combine.droppableId].findIndex(\n        (tag) => tag === result.combine.draggableId\n      );\n      const swappeeSource = {\n        droppableId: result.combine.droppableId,\n        index: swappeeIndex,\n      };\n\n      const swapperSource = source;\n      const swapperDestination = swappeeSource;\n\n      if (swapperSource.droppableId === swapperDestination.droppableId) return;\n      const swapResult = swap(\n        dndPairs[swapperSource.droppableId],\n        dndPairs[swapperDestination.droppableId],\n        swapperSource,\n        swapperDestination\n      );\n      const newPairs = [...dndPairs];\n      console.log(\"swapResult\", swapResult);\n      newPairs[source.droppableId] = swapResult[source.droppableId];\n      newPairs[swapperDestination.droppableId] =\n        swapResult[swapperDestination.droppableId];\n      setDndPairs([...newPairs]);\n    } else {\n      moveAndUpdatePairs(source, destination);\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      {dndPairs.map((pair, index) => (\n        <PairCard key={index} pair={pair} pairIndex={index} />\n      ))}\n    </DragDropContext>\n  );\n}\nexport default DndCards;\n","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":15,"column":6,"nodeType":"43","endLine":15,"endColumn":16,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":21,"column":6,"nodeType":"43","endLine":21,"endColumn":13,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":2,"column":16,"nodeType":"49","messageId":"50","endLine":2,"endColumn":19},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onPairChange'. Either include it or remove the dependency array. If 'onPairChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["53"],"React Hook useEffect has a missing dependency: 'dndPairs'. Either include it or remove the dependency array.",["54"],"@typescript-eslint/no-unused-vars","'Tag' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Update the dependencies array to be: [dndPairs, onPairChange]",{"range":"59","text":"60"},"Update the dependencies array to be: [dndPairs, pairs]",{"range":"61","text":"62"},[428,438],"[dndPairs, onPairChange]",[561,568],"[dndPairs, pairs]"]