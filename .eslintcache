[{"/Users/omart/Documents/React/pair-gen/src/index.tsx":"1","/Users/omart/Documents/React/pair-gen/src/reportWebVitals.ts":"2","/Users/omart/Documents/React/pair-gen/src/App.tsx":"3","/Users/omart/Documents/React/pair-gen/src/components/RollButton/RollButton.tsx":"4","/Users/omart/Documents/React/pair-gen/src/components/PairInput/PairInput.tsx":"5","/Users/omart/Documents/React/pair-gen/src/components/DndCards/DndCards.tsx":"6","/Users/omart/Documents/React/pair-gen/src/components/PairCard/PairCard.tsx":"7"},{"size":449,"mtime":1607755737711,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607462055402,"results":"10","hashOfConfig":"9"},{"size":6073,"mtime":1608080982514,"results":"11","hashOfConfig":"9"},{"size":841,"mtime":1607755737710,"results":"12","hashOfConfig":"9"},{"size":3459,"mtime":1607755737709,"results":"13","hashOfConfig":"9"},{"size":5346,"mtime":1608145290116,"results":"14","hashOfConfig":"9"},{"size":2254,"mtime":1608139676838,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"cw9fk7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/omart/Documents/React/pair-gen/src/index.tsx",[],["33","34"],"/Users/omart/Documents/React/pair-gen/src/reportWebVitals.ts",[],"/Users/omart/Documents/React/pair-gen/src/App.tsx",["35"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Row, Col, Tooltip } from \"antd\";\nimport \"./App.css\";\nimport PairInput from \"./components/PairInput/PairInput\";\nimport { Button } from \"antd\";\nimport ParticlesBg from \"particles-bg\";\nimport logo from \"./imgs/logo.png\";\nimport { CopyOutlined, GithubOutlined } from \"@ant-design/icons\";\nimport RollButton from \"./components/RollButton/RollButton\";\nimport DndCards from \"./components/DndCards/DndCards\";\n\nfunction App() {\n  const [names, setNames] = useState<string[]>([]);\n\n  const [pairs, setPairs] = useState<string[][]>([[]]);\n\n  const [doRollAnimation, setDoRollAnimation] = useState<number>(0);\n\n  const [hover, setHover] = useState<boolean>();\n\n  const [tooltipVisible, setTooltipVisible] = useState<boolean>();\n\n  function getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  const createCopyString = (array: String[][]): string => {\n    return `Pairs for ${new Date().toDateString()}: ${array\n      .map((item) => `\\n(${item.join(\", \")})`)\n      .join(\"\")}\\nGenerated using ${window.location.href}`;\n  };\n\n  const generatePairs = useCallback((names: string[]) => {\n    setDoRollAnimation(1);\n    let temp = names;\n    let tempPairs: string[][] = [];\n    while (temp.length > 0) {\n      let randomIndex = getRandomInt(0, temp.length);\n      const name1 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name1);\n      if (temp.length === 0) {\n        tempPairs = [...tempPairs, [name1]];\n        break;\n      }\n      randomIndex = getRandomInt(0, temp.length);\n      const name2 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name2);\n      tempPairs = [...tempPairs, [name1, name2]];\n    }\n    setPairs(tempPairs);\n  }, []);\n\n  const createRequestUri = (names: string[]) => {\n    names.length > 0\n      ? window.history.replaceState(null, \"\", `?names=${names.join()}`)\n      : window.history.replaceState(null, \"\", \"/\");\n  };\n\n  useEffect(() => {\n    const windowUrl = window.location.search;\n    const params = new URLSearchParams(windowUrl);\n    const namesFromUrl = params.get(\"names\");\n    if (namesFromUrl) {\n      const namesFromUrlArray = namesFromUrl\n        .split(\",\")\n        .filter((item) => item !== \"\")\n        .map((item) => decodeURIComponent(item).trim());\n      setNames(namesFromUrlArray);\n      generatePairs(namesFromUrlArray);\n    }\n  }, [generatePairs]);\n\n  return (\n    <>\n      <div className=\"App\">\n        <Col>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 36]}>\n            <Col>\n              <img height=\"100\" width=\"100\" alt={\"logo\"} src={logo} />\n            </Col>\n            <Col>\n              <span className=\"title-text\">Pair Gen</span>\n            </Col>\n          </Row>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 8]}>\n            <PairInput\n              names={names}\n              onNewName={(names) => {\n                setNames(names);\n              }}\n              onEnter={(names) => {\n                createRequestUri(names);\n                generatePairs(names);\n              }}\n            />\n            <Col>\n              <RollButton\n                doAnimation={doRollAnimation}\n                onClick={() => {\n                  createRequestUri(names);\n                  generatePairs(names);\n                }}\n                onRollAnimationEnd={() => {\n                  setDoRollAnimation(0);\n                }}\n              />\n            </Col>\n          </Row>\n\n          <Row align=\"middle\" justify=\"center\" gutter={[16, 1]}>\n            <div\n              className={`pair-card-container ${\n                hover ? \"pair-card-container-hover\" : \"\"\n              }`}\n            >\n              {pairs.filter((pair) => pair.length).length > 0 && (\n                <DndCards\n                  highlightClassName={hover ? \"pair-card-hover\" : \"\"}\n                  pairs={pairs}\n                  onPairChange={(newPairs) => setPairs(newPairs)}\n                />\n              )}\n            </div>\n          </Row>\n          <Row align=\"middle\" justify=\"center\">\n            <div className={\"copy-container\"}>\n              {pairs.filter((pair) => pair.length).length > 0 && (\n                <Tooltip\n                  placement=\"right\"\n                  color={\"white\"}\n                  overlayClassName={\"copied-tooltip\"}\n                  trigger={\"click\"}\n                  visible={tooltipVisible}\n                  title={\n                    <span style={{ color: \"black\", fontWeight: \"bold\" }}>\n                      Copied!\n                    </span>\n                  }\n                >\n                  <Button\n                    className=\"copy-button\"\n                    onMouseEnter={() => {\n                      setHover(true);\n                    }}\n                    onMouseLeave={() => {\n                      setHover(false);\n                    }}\n                    onClick={() => {\n                      setTooltipVisible(true);\n                      setTimeout(() => {\n                        setTooltipVisible(false);\n                      }, 1000);\n                      navigator.clipboard.writeText(createCopyString(pairs));\n                    }}\n                    style={{ background: \"transparent\", border: 0 }}\n                  >\n                    <CopyOutlined className=\"copy-icon\" />\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          </Row>\n        </Col>\n      </div>\n      <a\n        className=\"credits\"\n        target=\"_blank\"\n        href=\"https://github.com/Christian0411/pair-gen\"\n      >\n        Website by Oscar Martinez & Christian Canizares\n        <GithubOutlined\n          style={{ marginLeft: \"10px\", fontSize: \"16px\", color: \"#08c\" }}\n        />\n      </a>\n\n      <ParticlesBg color=\"#56ca8d\" num={40} type=\"cobweb\" bg={true} />\n    </>\n  );\n}\n\nexport default App;\n","/Users/omart/Documents/React/pair-gen/src/components/RollButton/RollButton.tsx",[],"/Users/omart/Documents/React/pair-gen/src/components/PairInput/PairInput.tsx",[],"/Users/omart/Documents/React/pair-gen/src/components/DndCards/DndCards.tsx",["36","37","38","39"],"/Users/omart/Documents/React/pair-gen/src/components/PairCard/PairCard.tsx",["40","41"],"import React, { useEffect } from \"react\";\nimport { Card, Tag } from \"antd\";\nimport \"./PairCard.css\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport swap from \"../../imgs/swap.png\";\n\ninterface PairCardProps {\n  pair: string[];\n  pairIndex: number;\n  highlightClassName: string;\n  isDragging?: boolean;\n}\n\nfunction PairCard({\n  pair,\n  pairIndex,\n  highlightClassName,\n  isDragging,\n}: PairCardProps) {\n  useEffect(() => {\n    console.table(pair);\n  }, []);\n  const getItemStyle = (draggableStyle: any, snapshot: any) => {\n    const style = {\n      ...draggableStyle,\n\n      // opt out of pointer-events: none for dragging items\n      ...(snapshot.isDragging && { pointerEvents: \"auto\" }),\n    };\n\n    if (snapshot.combineWith) {\n      return { ...style, cursor: `url(${swap}), auto` };\n    }\n    return style;\n  };\n\n  return (\n    <Card\n      key={pairIndex}\n      className={`card ${pair.length || \"add-new-pair\"}  ${highlightClassName}`}\n      title={`Pair ${pairIndex}`}\n      size={\"small\"}\n      bordered={false}\n      data-visible={isDragging ? 0 : 1}\n    >\n      <Droppable\n        key={pairIndex}\n        direction={\"vertical\"}\n        droppableId={`${pairIndex}`}\n        isCombineEnabled\n      >\n        {(provided, snapshot) => (\n          <div\n            className={\"tag-container\"}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {pair.map((person, index) => (\n              <Draggable\n                index={index}\n                key={`${person}`}\n                draggableId={`${person}`}\n              >\n                {(provided, snapshot) => (\n                  <span\n                    className={\"tag\"}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={getItemStyle(\n                      provided.draggableProps.style,\n                      snapshot\n                    )}\n                  >\n                    {person}\n                  </span>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </Card>\n  );\n}\n\nexport default PairCard;\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":169,"column":9,"nodeType":"48","endLine":169,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":15,"column":10,"nodeType":"51","messageId":"52","endLine":15,"endColumn":20},{"ruleId":"49","severity":1,"message":"53","line":15,"column":22,"nodeType":"51","messageId":"52","endLine":15,"endColumn":35},{"ruleId":"54","severity":1,"message":"55","line":19,"column":6,"nodeType":"56","endLine":19,"endColumn":16,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":25,"column":6,"nodeType":"56","endLine":25,"endColumn":13,"suggestions":"59"},{"ruleId":"49","severity":1,"message":"60","line":2,"column":16,"nodeType":"51","messageId":"52","endLine":2,"endColumn":19},{"ruleId":"54","severity":1,"message":"61","line":22,"column":6,"nodeType":"56","endLine":22,"endColumn":8,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","@typescript-eslint/no-unused-vars","'isDragging' is assigned a value but never used.","Identifier","unusedVar","'setIsDragging' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onPairChange'. Either include it or remove the dependency array. If 'onPairChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["65"],"React Hook useEffect has a missing dependency: 'dndPairs'. Either include it or remove the dependency array.",["66"],"'Tag' is defined but never used.","React Hook useEffect has a missing dependency: 'pair'. Either include it or remove the dependency array.",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [dndPairs, onPairChange]",{"range":"74","text":"75"},"Update the dependencies array to be: [dndPairs, pairs]",{"range":"76","text":"77"},"Update the dependencies array to be: [pair]",{"range":"78","text":"79"},[619,629],"[dndPairs, onPairChange]",[752,759],"[dndPairs, pairs]",[471,473],"[pair]"]