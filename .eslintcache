[{"/home/chris/pair-gen/src/App.tsx":"1","/home/chris/pair-gen/src/index.tsx":"2","/home/chris/pair-gen/src/reportWebVitals.ts":"3","/home/chris/pair-gen/src/components/PairInput/PairInput.tsx":"4","/home/chris/pair-gen/src/components/PairCard/PairCard.tsx":"5"},{"size":2729,"mtime":1607654174768,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1607653774548,"results":"8","hashOfConfig":"7"},{"size":425,"mtime":1607378576922,"results":"9","hashOfConfig":"7"},{"size":3238,"mtime":1607641554276,"results":"10","hashOfConfig":"7"},{"size":486,"mtime":1607557859896,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"dm7g9m",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/home/chris/pair-gen/src/App.tsx",["25","26"],"import React, { useState } from \"react\";\nimport { Row, Col, Slider } from \"antd\";\nimport \"./App.css\";\nimport PairInput from \"./components/PairInput/PairInput\";\nimport PairCard from \"./components/PairCard/PairCard\";\nimport { Button } from \"antd\";\nimport ParticlesBg from \"particles-bg\";\nimport logo from \"./imgs/logo.png\";\n\nfunction App() {\n  const [names, setNames] = useState<string[]>([]);\n\n  const [pairs, setPairs] = useState<string[][]>([]);\n\n  function getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  const StringifyArray = (array: String[][]): string => {\n    return `Pairs for ${new Date().toDateString()}: ${array\n      .map((item) => `\\n(${item.join(\", \")})`)\n      .join(\"\")}`;\n  };\n\n  const generatePairs = (names: string[]) => {\n    setNames([]);\n    let temp = names;\n    let tempPairs: string[][] = [];\n    while (temp.length > 0) {\n      let randomIndex = getRandomInt(0, temp.length);\n      const name1 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name1);\n      if (temp.length === 0) {\n        tempPairs = [...tempPairs, [name1]];\n        break;\n      }\n      randomIndex = getRandomInt(0, temp.length);\n      const name2 = temp[randomIndex];\n      temp = temp.filter((item: string) => item !== name2);\n      tempPairs = [...tempPairs, [name1, name2]];\n    }\n    setPairs(tempPairs);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <Col>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 36]}>\n            <Col>\n              <img height=\"100\" width=\"100\" src={logo} />\n            </Col>\n            <Col>\n              <span className=\"title-text\">Pair Gen</span>\n            </Col>\n          </Row>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 8]}>\n            <PairInput\n              names={names}\n              onNewName={setNames}\n              onEnter={generatePairs}\n            />\n            {pairs.length > 0 && (\n              <Button\n                onClick={() => {\n                  navigator.clipboard.writeText(StringifyArray(pairs));\n                }}\n              >\n                Copy\n              </Button>\n            )}\n          </Row>\n          <Row align=\"middle\" justify=\"center\" gutter={[8, 8]}>\n            <div className={\"pair-card-container\"}>\n              {pairs.map((pair, index) => (\n                <PairCard pair={pair} pairIndex={index} />\n              ))}\n            </div>\n          </Row>\n        </Col>\n      </div>\n      <ParticlesBg color=\"#63b89e\" num={40} type=\"cobweb\" bg={true} />\n    </>\n  );\n}\n\nexport default App;\n",["27","28"],"/home/chris/pair-gen/src/index.tsx",[],"/home/chris/pair-gen/src/reportWebVitals.ts",[],"/home/chris/pair-gen/src/components/PairInput/PairInput.tsx",[],["29","30"],"/home/chris/pair-gen/src/components/PairCard/PairCard.tsx",[],{"ruleId":"31","severity":1,"message":"32","line":2,"column":20,"nodeType":"33","messageId":"34","endLine":2,"endColumn":26},{"ruleId":"35","severity":1,"message":"36","line":53,"column":15,"nodeType":"37","endLine":53,"endColumn":58},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},"@typescript-eslint/no-unused-vars","'Slider' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["44"],"no-negated-in-lhs",["45"],["44"],["45"],"no-global-assign","no-unsafe-negation"]