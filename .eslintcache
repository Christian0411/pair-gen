[{"/Users/omart/Documents/React/pair-gen/src/index.tsx":"1","/Users/omart/Documents/React/pair-gen/src/reportWebVitals.ts":"2","/Users/omart/Documents/React/pair-gen/src/App.tsx":"3","/Users/omart/Documents/React/pair-gen/src/components/RollButton/RollButton.tsx":"4","/Users/omart/Documents/React/pair-gen/src/components/PairInput/PairInput.tsx":"5","/Users/omart/Documents/React/pair-gen/src/components/DndCards/DndCards.tsx":"6","/Users/omart/Documents/React/pair-gen/src/components/PairCard/PairCard.tsx":"7"},{"size":449,"mtime":1607755737711,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1607462055402,"results":"10","hashOfConfig":"9"},{"size":6073,"mtime":1608163302721,"results":"11","hashOfConfig":"9"},{"size":841,"mtime":1607755737710,"results":"12","hashOfConfig":"9"},{"size":3459,"mtime":1607755737709,"results":"13","hashOfConfig":"9"},{"size":5346,"mtime":1608145290116,"results":"14","hashOfConfig":"9"},{"size":2254,"mtime":1608163547998,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"cw9fk7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/omart/Documents/React/pair-gen/src/index.tsx",[],["32","33"],"/Users/omart/Documents/React/pair-gen/src/reportWebVitals.ts",[],"/Users/omart/Documents/React/pair-gen/src/App.tsx",["34"],"/Users/omart/Documents/React/pair-gen/src/components/RollButton/RollButton.tsx",[],"/Users/omart/Documents/React/pair-gen/src/components/PairInput/PairInput.tsx",[],"/Users/omart/Documents/React/pair-gen/src/components/DndCards/DndCards.tsx",["35","36","37","38"],"import React, { useEffect, useState } from \"react\";\nimport PairCard from \"../PairCard/PairCard\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport \"./DndCards.css\";\nimport { PlusOutlined } from \"@ant-design/icons\";\ninterface DndCardsProps {\n  pairs: string[][];\n  onPairChange: (newPairs: string[][]) => void;\n  highlightClassName: string;\n}\n\nfunction DndCards({ pairs, onPairChange, highlightClassName }: DndCardsProps) {\n  const [dndPairs, setDndPairs] = useState<string[][]>(pairs);\n\n  const [isDragging, setIsDragging] = useState(false);\n\n  useEffect(() => {\n    onPairChange(dndPairs);\n  }, [dndPairs]);\n\n  useEffect(() => {\n    if (JSON.stringify(dndPairs) !== JSON.stringify(pairs)) {\n      setDndPairs(pairs);\n    }\n  }, [pairs]);\n\n  const reorder = (list: any, startIndex: any, endIndex: any) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  const move = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  };\n\n  const swap = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    const [removedDes] = destClone.splice(\n      droppableDestination.index,\n      1,\n      removed\n    );\n\n    sourceClone.splice(droppableSource.index, 0, removedDes);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n\n  const moveAndUpdatePairs = (source: any, destination: any) => {\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(dndPairs[sInd], source.index, destination.index);\n      const newPairs: any = [...dndPairs];\n      newPairs[sInd] = items;\n      setDndPairs(newPairs);\n    } else if (destination.droppableId > dndPairs.length-1) {\n      let newPairs = dndPairs;\n      const temp = newPairs[source.droppableId].splice(source.index, 1);\n      newPairs = newPairs.concat([temp])\n      setDndPairs(newPairs.filter((group) => group.length))\n    } else {\n      const result = move(dndPairs[sInd], dndPairs[dInd], source, destination);\n      const newPairs = [...dndPairs];\n      newPairs[sInd] = result[sInd];\n      newPairs[dInd] = result[dInd];\n\n      setDndPairs(newPairs.filter((group) => group.length));\n    }\n  };\n\n  function onDragEnd(result: any) {\n    const { source, destination } = result;\n    if (!destination && !result.combine) {\n      return;\n    }\n\n    if (result.combine) {\n      const swappeeIndex = dndPairs[result.combine.droppableId].findIndex(\n        (tag) => tag === result.combine.draggableId\n      );\n      const swappeeSource = {\n        droppableId: result.combine.droppableId,\n        index: swappeeIndex,\n      };\n\n      const swapperSource = source;\n      const swapperDestination = swappeeSource;\n\n      if (swapperSource.droppableId === swapperDestination.droppableId) return;\n      const swapResult = swap(\n        dndPairs[swapperSource.droppableId],\n        dndPairs[swapperDestination.droppableId],\n        swapperSource,\n        swapperDestination\n      );\n      const newPairs = [...dndPairs];\n\n      newPairs[source.droppableId] = swapResult[source.droppableId];\n      newPairs[swapperDestination.droppableId] =\n        swapResult[swapperDestination.droppableId];\n      setDndPairs([...newPairs]);\n    } else if (destination.droppableId === \"add-new-card\"){\n      destination.droppableId = dndPairs.length.toString()\n      moveAndUpdatePairs(source, destination);\n    } else {\n      moveAndUpdatePairs(source, destination);\n    }\n  }\n\n  const onBeforeCapture = () => {\n    setDndPairs([...dndPairs]);\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} onBeforeCapture={onBeforeCapture}>\n      {dndPairs.map((pair, index) => (\n        <PairCard\n          highlightClassName={highlightClassName}\n          key={index}\n          pair={pair}\n          pairIndex={index}\n        />\n      ))}\n      <Droppable\n        key={\"add-new-card\"}\n        direction={\"vertical\"}\n        droppableId={`add-new-card`}\n        isCombineEnabled\n      >\n        {(provided, snapshot) => (\n          <div\n            className={`add-new-card-container ${snapshot.isDraggingOver ? \"add-new-card-container-hover\" : \"\"}`}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            <PlusOutlined className=\"add-new-card\" />\n            <span\n              style={{\n                display: \"none\",\n              }}\n            >\n              {provided.placeholder}\n            </span>\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\nexport default DndCards;\n","/Users/omart/Documents/React/pair-gen/src/components/PairCard/PairCard.tsx",["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":169,"column":9,"nodeType":"47","endLine":169,"endColumn":24},{"ruleId":"48","severity":1,"message":"49","line":15,"column":10,"nodeType":"50","messageId":"51","endLine":15,"endColumn":20},{"ruleId":"48","severity":1,"message":"52","line":15,"column":22,"nodeType":"50","messageId":"51","endLine":15,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":19,"column":6,"nodeType":"55","endLine":19,"endColumn":16,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":25,"column":6,"nodeType":"55","endLine":25,"endColumn":13,"suggestions":"58"},{"ruleId":"48","severity":1,"message":"59","line":2,"column":16,"nodeType":"50","messageId":"51","endLine":2,"endColumn":19},{"ruleId":"53","severity":1,"message":"60","line":22,"column":6,"nodeType":"55","endLine":22,"endColumn":8,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","@typescript-eslint/no-unused-vars","'isDragging' is assigned a value but never used.","Identifier","unusedVar","'setIsDragging' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onPairChange'. Either include it or remove the dependency array. If 'onPairChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["64"],"React Hook useEffect has a missing dependency: 'dndPairs'. Either include it or remove the dependency array.",["65"],"'Tag' is defined but never used.","React Hook useEffect has a missing dependency: 'pair'. Either include it or remove the dependency array.",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [dndPairs, onPairChange]",{"range":"73","text":"74"},"Update the dependencies array to be: [dndPairs, pairs]",{"range":"75","text":"76"},"Update the dependencies array to be: [pair]",{"range":"77","text":"78"},[619,629],"[dndPairs, onPairChange]",[752,759],"[dndPairs, pairs]",[471,473],"[pair]"]